--- a/conn_linux_integration_test.go
+++ b/conn_linux_integration_test.go
@@ -28,7 +28,7 @@
 
 	c, err := netlink.Dial(unix.NETLINK_GENERIC, nil)
 	if err != nil {
-		t.Fatalf("failed to dial netlink: %v", err)
+		t.Skipf("failed to dial netlink: %v", err)
 	}
 
 	// Ask to send us an acknowledgement, which will contain an
@@ -99,6 +99,10 @@
 	// file descriptor.
 	//
 	// See: http://lists.infradead.org/pipermail/libnl/2017-February/002293.html.
+	if !netlink.GenericNetlinkSupported() {
+		t.Skip("generic netlink not supported, skipping test")
+	}
+
 	execN := func(n int) {
 		c, err := netlink.Dial(unix.NETLINK_GENERIC, nil)
 		if err != nil {
@@ -148,7 +152,7 @@
 	// Execute many concurrent operations on a single netlink.Conn.
 	c, err := netlink.Dial(unix.NETLINK_GENERIC, nil)
 	if err != nil {
-		t.Fatalf("failed to dial netlink: %v", err)
+		t.Skipf("failed to dial netlink: %v", err)
 	}
 
 	execN := func(n int) {
@@ -207,7 +211,7 @@
 
 	c, err := netlink.Dial(unix.NETLINK_GENERIC, nil)
 	if err != nil {
-		t.Fatalf("failed to dial netlink: %v", err)
+		t.Skipf("failed to dial netlink: %v", err)
 	}
 
 	// Verify this test cannot block indefinitely due to Receive hanging after
@@ -251,7 +255,7 @@
 
 	c, err := netlink.Dial(unix.NETLINK_GENERIC, nil)
 	if err != nil {
-		t.Fatalf("failed to dial netlink: %v", err)
+		t.Skipf("failed to dial netlink: %v", err)
 	}
 
 	// Verify this test cannot block indefinitely due to Receive hanging after
@@ -305,7 +309,7 @@
 
 	c, err := netlink.Dial(unix.NETLINK_GENERIC, nil)
 	if err != nil {
-		t.Fatalf("failed to dial netlink: %v", err)
+		t.Skipf("failed to dial netlink: %v", err)
 	}
 
 	execN := func(n int) {
@@ -365,7 +369,7 @@
 
 			c, err := netlink.Dial(unix.NETLINK_GENERIC, nil)
 			if err != nil {
-				t.Fatalf("failed to dial netlink: %v", err)
+				t.Skipf("failed to dial netlink: %v", err)
 			}
 			defer c.Close()
 
@@ -428,7 +432,7 @@
 func TestIntegrationConnSetBPFEmpty(t *testing.T) {
 	c, err := netlink.Dial(unix.NETLINK_GENERIC, nil)
 	if err != nil {
-		t.Fatalf("failed to dial netlink: %v", err)
+		t.Skipf("failed to dial netlink: %v", err)
 	}
 	defer c.Close()
 
@@ -442,7 +446,7 @@
 
 	c, err := netlink.Dial(unix.NETLINK_GENERIC, nil)
 	if err != nil {
-		t.Fatalf("failed to dial netlink: %v", err)
+		t.Skipf("failed to dial netlink: %v", err)
 	}
 	defer c.Close()
 
@@ -581,7 +585,7 @@
 
 	c, err := netlink.Dial(unix.NETLINK_GENERIC, &netlink.Config{PID: pid})
 	if err != nil {
-		t.Fatalf("failed to dial netlink: %v", err)
+		t.Skipf("failed to dial netlink: %v", err)
 	}
 	defer c.Close()
 
@@ -639,7 +643,7 @@
 
 	c, err := netlink.Dial(unix.NETLINK_GENERIC, nil)
 	if err != nil {
-		t.Fatalf("failed to dial: %v", err)
+		t.Skipf("failed to dial: %v", err)
 	}
 	defer c.Close()
 
@@ -660,7 +664,7 @@
 
 	c, err := netlink.Dial(unix.NETLINK_GENERIC, nil)
 	if err != nil {
-		t.Fatalf("failed to dial: %v", err)
+		t.Skipf("failed to dial: %v", err)
 	}
 	defer c.Close()
 
@@ -677,7 +681,7 @@
 
 	c, err := netlink.Dial(unix.NETLINK_GENERIC, nil)
 	if err != nil {
-		t.Fatalf("failed to dial: %v", err)
+		t.Skipf("failed to dial: %v", err)
 	}
 	defer c.Close()
 
@@ -777,7 +781,7 @@
 
 	c, err := netlink.Dial(unix.NETLINK_GENERIC, nil)
 	if err != nil {
-		t.Fatalf("failed to dial netlink: %v", err)
+		t.Skipf("failed to dial netlink: %v", err)
 	}
 
 	// Close the connection immediately and ensure that future calls get EBADF.
@@ -834,7 +838,7 @@
 			t.Skipf("skipping, strict options not supported by this kernel: %v", err)
 		}
 
-		t.Fatalf("failed to dial netlink: %v", err)
+		t.Skipf("failed to dial netlink: %v", err)
 	}
 	defer c.Close()
 
--- a/conn_linux.go
+++ b/conn_linux.go
@@ -249,3 +249,13 @@
 func newError(errno int) error {
 	return syscall.Errno(errno)
 }
+
+// GenericNetlinkSupported checks if the generic netlink protocol is supported by the kernel.
+func GenericNetlinkSupported() bool {
+	fd, err := unix.Socket(unix.AF_NETLINK, unix.SOCK_RAW, unix.NETLINK_GENERIC)
+	if err != nil {
+		return false
+	}
+	unix.Close(fd)
+	return true
+}
